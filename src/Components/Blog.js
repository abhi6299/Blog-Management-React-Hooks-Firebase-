import { useEffect, useReducer, useRef, useState } from "react";

import { db } from "../config/firebaseConfigDB";
import {collection, addDoc, doc, setDoc, getDoc, getDocs, onSnapshot, deleteDoc} from "firebase/firestore";

function blogsReducerFunction(state,action){
    switch(action.type){ //can use if-else as well
        case "AddBlogs":
            return [action.blog, ...state]
        case "RemoveBlogs":
            return state.filter((blog,index)=> index!==action.index)
        case "SET_BLOGS":
            return action.payload;
        default: 
            return [];
    }
}

//Blogging App using Hooks
export default function Blog(){
    
    // const [title,setTitle] = useState("");
    // const [content,setContent] = useState("");
    const [formData,setFormData] = useState({title:"",content:""});
    // const [blogs, setBlogs] = useState([]); // done via useState() Hooks
    // OR 
    const [blogs, dispatch] = useReducer(blogsReducerFunction, []) //using useReducer for blogs array
    const titleRef = useRef(null);

    useEffect(()=>{
        titleRef.current.focus();
    },[])

    useEffect(()=>{
        if(blogs.length && blogs[0].title){
            document.title = blogs[0].title;
        }else{
            document.title = "No Blogs!"
        }
    },[blogs])

    //For one time render from DB using getDocs ---------------------------
    // useEffect(()=>{
    //     async function fetchData(){
    //         // console.log("Hey");
    //         const fetchedDataArray = await getDocs(collection(db,"blogs")); //Returns a array of blogs(documents)
    //         // console.log(fetchedDataArray);
    //         const blogsFetched = fetchedDataArray.docs.map((doc)=> {
    //             // console.log(doc);
    //             return {
    //                 id:doc.id,
    //                 ...doc.data()
    //             }
    //         })
    //         // console.log(blogsFetched);
    //         // setBlogs(blogsFetched);
    //         dispatch({ type: 'SET_BLOGS', payload: blogsFetched });
    //     }
    //     fetchData();
    // },[]);
    
    //For RealTime Update----------------
    useEffect(()=>{
            const unsub = onSnapshot(collection(db,"blogs"),
                    (snapShot)=>{
                        const blogsFetched = snapShot.docs.map((doc)=> {
                            // console.log(doc);
                            return {
                                id:doc.id,
                                ...doc.data()
                            }
                        })
                        // console.log(blogsFetched);
                        // setBlogs(blogsFetched);
                        dispatch({ type: 'SET_BLOGS', payload: blogsFetched });
                    })
    },[]);

    //Passing the synthetic event as argument to stop refreshing the page on submit
    async function handleSubmit(e){
        e.preventDefault();
        // setBlogs([{title:title,content:content}, ...blogs]);
        // setBlogs([{title:formData.title,content:formData.content}, ...blogs]); // intialState setBlogs ki []array hai na
            
                        //using reducer's dispatch instead of setBlogs
        /*dispatch({type:"AddBlogs",blog:{title:formData.title,content:formData.content}})
        console.log(blogs);*/
        
        // setTitle("");
        // setContent("");

                            //Adding data to FireStore DB
        //Using addDoc function
            // const docRef = await addDoc(collection(db,"blogs"),{
            //     title:formData.title,
            //     content:formData.content,
            //     createdOn: new Date()
            // });
        //Using setDoc function for autogenerated ID
        const docRef = doc(collection(db,"blogs"));
        // console.log(docRef.id);
        await setDoc(docRef,{
            title:formData.title,
            content:formData.content,
            createdOn: new Date()
        })

        setFormData({title:"",content:""});
        titleRef.current.focus();
    }
    //handling set Title
    function handleTitleChange(e){
        // setTitle(e.target.value);
        setFormData({title:e.target.value,content:formData.content})
    }
    //Hanlding delete b;pg
    async function removeBlog(i){
        // setBlogs(blogs.filter((blog,index) => i!==index));
            //Using reducer f.
        // dispatch({type:"RemoveBlogs",index: i})
            //Using Db delete
        const delRef= doc(db,"blogs",i);
        await deleteDoc(delRef);
    }

    return(
        <>
        {/* Heading of the page */}
        <h1>Write a Blog!</h1>

        {/* Division created to provide styling of section to the form */}
        <div className="section">

        {/* Form for to write the blog */}
            <form onSubmit={handleSubmit}>

                {/* Row component to create a row for first input field */}
                <Row label="Title">
                        <input className="input"
                                placeholder="Enter the Title of the Blog here.."
                                value = {formData.title}
                                ref = {titleRef}
                                onChange = {(e)=>handleTitleChange(e)}/>
                </Row >

                {/* Row component to create a row for Text area field */}
                <Row label="Content">
                        <textarea className="input content"
                                placeholder="Content of the Blog goes here.."
                                required
                                value = {formData.content}
                                onChange = {(e)=>setFormData({title:formData.title ,content:e.target.value})}/>
                </Row >

                {/* Button to submit the blog */}            
                <button className = "btn">ADD</button>
            </form>
                     
        </div>

        <hr/>

        {/* Section where submitted blogs will be displayed */}
        <h2> Blogs </h2>
        {blogs.map((blog,i)=>{
            return(
                <div className="blog" key={i}>
                    <h3>{blog.title}</h3>
                    <p>{blog.content}</p>
                    <div className="blog-btn">
                        <button onClick={()=> removeBlog(blog.id)} className="btn remove">
                            Delete
                        </button>
                    </div>
                </div>
            )
        })}
        </>
        )
    }

//Row component to introduce a new row section in the form
function Row(props){
    const{label} = props;
    return(
        <>
        <label>{label}<br/></label>
        {props.children}
        <hr />
        </>
    )
}
